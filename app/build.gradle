/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco' // Apply the JaCoCo plugin for test coverage
    id 'maven-publish' // Apply the Maven Publish plugin
}

def versionFile = file('version.txt')
if (!versionFile.exists()) {
    versionFile.text = '1.0.0'
}

def currentVersion = versionFile.text.trim()
def versionParts = currentVersion.split('\\.')
def newVersion = "${versionParts[0]}.${versionParts[1]}.${(versionParts[2] as int) + 1}"
version = newVersion // Use the incremented version

// Update the version.txt file with the new version
versionFile.text = newVersion

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation 'commons-codec:commons-codec:1.18.0'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

javadoc {
    exclude 'example/app/**'
    // Ensure the Javadoc task is properly configured
    destinationDir = file("$buildDir/docs/javadoc")
    failOnError = false // Prevent build failure if there are Javadoc warnings
}

application {
    // Define the main class for the application.
    mainClass = 'example.app.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport' // Generate test coverage report after tests
}

jacoco {
    toolVersion = "0.8.10" // Specify the JaCoCo version
}

jacocoTestReport {
    dependsOn test // Ensure tests run before generating the report

    reports {
        csv.required.set(true) // Enable csv report for CI tools
        html.required.set(true) // Enable HTML report for local viewing
    }

    // Exclude the example.app package from the coverage report
    classDirectories.setFrom(
        fileTree(dir: "$buildDir/classes/java/main", exclude: ['example/app/**'])
    )
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = 'dev.vink' // Set the group ID
            artifactId = 'jtotp' // Set the artifact ID
            version = project.version // Use the dynamic version
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Vi-Nk/jTOTP")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            name = "MavenCentral"
            url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
        project.findProperty("signing.keyId") ?: System.getenv("SIGNING_KEY_ID"),
        project.findProperty("signing.secretKeyRingFile") ?: System.getenv("SIGNING_SECRET_KEY"),
        project.findProperty("signing.password") ?: System.getenv("SIGNING_PASSWORD")
    )
    sign publishing.publications.mavenJava
}
